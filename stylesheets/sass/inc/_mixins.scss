@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
			/* on retina, use image that's scaled by 2 */
			background-image: url($image);
			background-size: $width $height;
		}
}

@import "compass/css3/box-shadow";
@import "compass/css3/text-shadow";

$photoshop-global-light: 120deg !default;

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}


@function pi() {
  @return 3.14159265359;
}


@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}


@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}


//--------------------------------
// Photoshop Shadow Function
//--------------------------------
@function photoshop-shadow( $angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000, $inner: false ) {
  // default to degrees, same as photoshop
  @if unitless($angle) {
    $angle: $angle * 1deg;
  }

  // compass has a bug converting degrees (fixed in Compass 0.12)
  // https://github.com/chriseppstein/compass/pull/666
  @if unit($angle) ==  'deg' {
    // convert to radians to avoid issues
    $angle: ((180 - ($angle/1deg)) * pi() / 180);
  }
  //TODO: other angle units, including rad, will cause issues

  // SASS doesn't do percentages cleanly
  @if not(unitless($spread)) and unit($spread) == '%' {
    // remove the percentage unit
    $spread: $spread/1%;
  } @else if $spread < 0 {
    // correct for passing the spread as a decimal
    $spread: $spread * 100;
  }

  $h-shadow: round(cos($angle) * $distance);
  $v-shadow: round(sin($angle) * $distance);
  $css-spread: $size * ($spread/100);
  $blur: $size - $css-spread;
  $inset: if($inner != false, 'inset', '');

  @return ( $h-shadow $v-shadow $blur $css-spread $color unquote($inset) );
}

@function photoshop-text-shadow( $angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000 ) {
  $shadow: photoshop-shadow($angle, $distance, $spread, $size, $color);
  @return (nth($shadow, 1) nth($shadow, 2) nth($shadow, 3) nth($shadow, 5));
}

@function photoshop-glow($choke: 0, $size: 0, $color: #fff, $inner: false) {
  @return photoshop-shadow(0, 0, $choke, $size, $color, $inner);
}

//--------------------------------
// Photoshop Drop Shadow
//--------------------------------
@mixin photoshop-drop-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  @include box-shadow(photoshop-shadow($angle, $distance, $spread, $size, $color));
}

//--------------------------------
// Photoshop Inner Shadow
//--------------------------------
@mixin photoshop-inner-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  @include box-shadow(photoshop-shadow($angle, $distance, $spread, $size, $color, true));
}

//--------------------------------
// Photoshop Text Shadow
//--------------------------------
@mixin photoshop-text-shadow ($angle: $photoshop-global-light, $distance: 0, $spread: 0, $size: 0, $color: #000) {
  // NOTE: $spread has no effect for text shadows
  @include text-shadow(photoshop-text-shadow($angle, $distance, $spread, $size, $color));
}

//--------------------------------
// Photoshop Outer Glow
//--------------------------------
@mixin photoshop-outer-glow ($choke: 0, $size: 0, $color: #fff) {
  // experimantal
  // noise, technique, source: center, and quality are not supported
  @include box-shadow(photoshop-glow($choke, $size, $color, false));
}

//--------------------------------
// Photoshop Inner Glow
//--------------------------------
@mixin photoshop-inner-glow ($choke: 0, $size: 0, $color: #fff) {
  // experimantal
  // noise, technique, source: center, and quality are not supported
  @include box-shadow(photoshop-glow($choke, $size, $color, true));
}